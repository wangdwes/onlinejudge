import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class Solution {

    public int ladderLength(String start, String end, Set<String> dict) {
    	if (start == end) return 0;

    	Set<String> seeds = new HashSet<String>();
    	Set<String> interchange = new HashSet<String>();
    	seeds.add(start); dict.add(end); int iterations = 0; 
    	
    	while (!seeds.isEmpty()) {
    		interchange.clear();
    		int discrep = 0, mindiscrep = Integer.MAX_VALUE;
    		
    		Iterator<String> seedIterator = seeds.iterator();
    		while (seedIterator.hasNext()) {
    			String seed = seedIterator.next();
    			Iterator<String> dictIterator = dict.iterator();
    			while (dictIterator.hasNext()) {
    				String diction = dictIterator.next();
    				discrep = discrepancy(seed, diction);
    				if (discrep == 1) { 
    					dictIterator.remove();
    					interchange.add(diction); 
    					if (diction == end) return iterations + 2; } }
    			
    			seedIterator.remove();
    		}
 
    		seeds.addAll(interchange); 
    		iterations++;
    	}

    	if (seeds.contains(end)) return iterations + 1;
    	else return 0;
    }
    
    public boolean isNeighbor(String a, String b) {
    	int discrepancy = 0; 
    	for (int index = 0; index < a.length(); index++)
    		if (a.charAt(index) != b.charAt(index)) return retval;
    	return retval;
    }
    
	
}
